[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "code-summarizer"
version = "1.0.0"
description = "AI-powered code analysis and summarization tool"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Code Analysis Team", email = "team@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.12"
dependencies = [
    "click>=8.0.0",
    "openai>=1.0.0",
    "pyyaml>=6.0",
    "tiktoken>=0.5.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "python-multipart>=0.0.6",
    "aiofiles>=22.1.0",
    "pydantic-settings>=2.10.1",
    "slowapi>=0.1.9",
    "python-jose[cryptography]>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.0.0",
    "types-aiofiles>=22.1.0",
    "pre-commit>=3.0.0",
]
lint = [
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "types-pyyaml>=6.0.0",
    "types-requests>=2.0.0",
    "types-aiofiles>=22.1.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/code-summarizer"
Issues = "https://github.com/yourorg/code-summarizer/issues"
Repository = "https://github.com/yourorg/code-summarizer"

[project.scripts]
code-summarizer = "code_summarizer.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/code_summarizer"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
src = ["app"]
extend-exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "D",    # pydocstyle
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "PERF", # perflint
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D213",  # Multi-line docstring summary should start at the second line
    "D203",  # 1 blank line required before class docstring
    "S101",  # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "T201",  # print found
    "PLR2004", # Magic value used in comparison - common values like 10, 1024 are clear
    "B904",  # Exception chaining - sometimes overkill for simple cases
    "B008",  # Do not perform function call in argument defaults - OK for FastAPI Depends()
    "PTH118", # os.path.join vs Path - both are fine, especially in os.walk contexts
    "PTH119", # os.path.basename vs Path.name - both are clear
    "PTH100", # os.path.abspath vs Path.resolve - both work fine
    "PTH113", # os.path.isfile vs Path.is_file - both are clear
    "PTH112", # os.path.isdir vs Path.is_dir - both are clear  
    "PTH110", # os.path.exists vs Path.exists - both work fine
    "C414",  # list() in sorted() - sometimes more readable for clarity
    "RET504", # Unnecessary assignment before return - sometimes aids debugging
    "PERF401", # List comprehension - not always more readable
    "ARG002", # Unused arguments - common in interfaces
    "PLR0912", # Too many branches - sometimes necessary for business logic
    "PTH123", # open() vs Path.open() - both are fine for simple cases
    "PLC0415", # Import position - traceback import in except block is idiomatic
    "D415",  # Docstring periods - overly pedantic for well-written docstrings
    "E501",  # Line too long - some strings are naturally long and clear
    "S104",  # Binding to all interfaces - common in server configs
    "N818",  # Exception naming - CodeSummarizerException is clear
    "D107",  # Missing docstring in __init__ - often redundant with class docstring
    "N805",  # First argument naming - cls is correct for validators
    "UP007", # Use X | Y for type annotations - Union is sometimes clearer
    "F841",  # Local variable assigned but never used - sometimes useful for debugging
    "PLR0911", # Too many return statements - sometimes necessary for clarity
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D100"]
"tests/**/*" = ["S101", "D100", "D103", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["code_summarizer"]
force-single-line = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# Black configuration
[tool.black]
target-version = ["py312"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "tiktoken.*",
    "openai.*",
]
ignore_missing_imports = true

# Temporary overrides for specific challenging cases
[[tool.mypy.overrides]]
module = "code_summarizer.*"
disable_error_code = [
    "no-any-return",  # yaml.safe_load returns Any, which is expected
    "no-untyped-def",  # Some validator functions are dynamically typed
    "call-overload",  # Pydantic Field() has complex overloads that are working correctly
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --cov=app --cov-report=term-missing"

# Coverage configuration
[tool.coverage.run]
source = ["app"]

[tool.coverage.report]
show_missing = true

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
]
